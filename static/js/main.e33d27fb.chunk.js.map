{"version":3,"sources":["components/Bars.js","Sorting-algorithms/BubbleSort.js","Sorting-algorithms/InsertionSort.js","Sorting-algorithms/QuickSort.js","Sorting-algorithms/MergeSort.js","Sorting-algorithms/HeapSort.js","App.js","index.js"],"names":["Bars","props","styles","height","style","className","myclass","animation","BubbleSort","arr","i","length","j","push","InsertionSort","key","Sort","st","en","pivot","inx","Partition","QuickSort","nextGap","gap","Math","floor","ceil","swap","temp","mergeSort","s","e","mid","start","end","inPlaceMerge","MergeSort","Heapify","n","largest","l","r","HeapSort","App","state","noofbars","speed","min","max","random","bararr","document","getElementsByClassName","backgroundColor","myarr","this","genreateRandomNumber","setState","elm","getElementById","parseInt","value","getrandomArray","sortedarr","slice","sort","a","b","checkSorted","disabled","h1","h2","color","setTimeout","c","background","animateSort","barsheight","map","val","onClick","type","insertionSort","bubbleSort","quickSort","heapSort","String","id","onInput","toggleSliderBars","Component","Main","reactDom","render"],"mappings":"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","file":"static/js/main.e33d27fb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Bars(props){\r\n\r\n    const styles={\r\n        height: `${props.height}px`,\r\n    }\r\n    return (\r\n        <div style={styles} className={props.myclass}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bars","let animation = [];\r\n\r\nfunction BubbleSort(arr) {\r\n  animation=[];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    for (let j = 0; j < arr.length - i - 1; j++) {\r\n      if (arr[j] > arr[j + 1]) {\r\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\r\n        animation.push([j, j + 1]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return animation;\r\n}\r\n\r\nexport default BubbleSort;\r\n","let animation=[];\r\n\r\nfunction InsertionSort(arr){\r\n    animation=[];\r\n    let key,j;\r\n    for(let i=1; i<arr.length; i++){\r\n        j=i-1;\r\n        key=arr[i];  //key is in unsorted array\r\n        while(j>=0 && key<arr[j]){\r\n            [arr[j+1],arr[j]]=[arr[j],arr[j+1]]\r\n            animation.push([j,j+1]);\r\n            j--;\r\n        }\r\n    }\r\n    \r\n    return animation;\r\n}\r\n\r\nexport default InsertionSort;","let animation = [];\r\nfunction Partition(arr, st, en) {\r\n  let pivot = arr[en]; //choosing pivot as last element\r\n  let inx = st;\r\n  for (let i = st; i < en; i++) {\r\n    //from st-->en-1\r\n    if (arr[i] <= pivot) {\r\n      animation.push([inx, i, en]);  // the elements to be swapped and pivot element\r\n      [arr[i], arr[inx]] = [arr[inx], arr[i]];\r\n      inx++;\r\n    }\r\n  }\r\n  animation.push([inx, en, en]);\r\n  [arr[inx], arr[en]] = [arr[en], arr[inx]];\r\n  return inx;\r\n}\r\n\r\nfunction Sort(arr, st, en) {\r\n  if (st >= en) return;\r\n  let pivot = Partition(arr, st, en);\r\n  Sort(arr, st, pivot - 1);\r\n  Sort(arr, pivot + 1, en);\r\n}\r\n\r\nfunction QuickSort(arr) {\r\n  animation=[];\r\n  Sort(arr, 0, arr.length - 1);\r\n  // console.log(arr);\r\n  return animation;\r\n}\r\n\r\nexport default QuickSort;\r\n","let animation = [];\r\n\r\nfunction nextGap(gap)\r\n{\r\n\tif (gap <= 1)\r\n\t\t\treturn 0;\r\n\t\treturn Math.floor(Math.ceil(gap / 2.0));\r\n}\r\n\r\n// Function for swapping\r\nfunction swap(arr,i,j)\r\n{\r\n    animation.push([i,j]);\r\n\tlet temp = arr[i];\r\n\t\tarr[i] = arr[j];\r\n\t\tarr[j] = temp;\r\n}\r\n\r\nfunction inPlaceMerge(arr,start,end)\r\n{\r\n\tlet gap = end - start + 1;\r\n\t\tfor (gap = nextGap(gap); gap > 0;\r\n\t\t\tgap = nextGap(gap)) {\r\n\t\t\tfor (let i = start; i + gap <= end; i++) {\r\n\t\t\t\tlet j = i + gap;\r\n\t\t\t\tif (arr[i] > arr[j])\r\n\t\t\t\t\tswap(arr, i, j);\r\n\t\t\t}\r\n\t\t}\r\n}\r\n\r\nfunction mergeSort(arr,s,e)\r\n{\r\n\tif (s === e)\r\n\t\t\treturn;\r\n\r\n\t\tlet mid = Math.floor((s + e) / 2);\r\n\r\n\t\tmergeSort(arr, s, mid);\r\n\t\tmergeSort(arr, mid + 1, e);\r\n\t\tinPlaceMerge(arr, s, e);\r\n}\r\n\r\n\r\nfunction MergeSort(arr) {\r\n\tanimation=[];\r\n  mergeSort(arr, 0, arr.length);\r\n  return animation;\r\n}\r\n\r\nexport default MergeSort;\r\n","let animation = [];\r\n\r\nfunction Heapify(arr, n, i) {\r\n  let largest = i; // Initialize largest as root\r\n  let l = 2 * i + 1; // left = 2*i + 1\r\n  let r = 2 * i + 2; // right = 2*i + 2\r\n\r\n  // If left child is larger than root\r\n  if (l < n && arr[l] > arr[largest]) largest = l;\r\n\r\n  // If right child is larger than largest so far\r\n  if (r < n && arr[r] > arr[largest]) largest = r;\r\n\r\n  // If largest is not root\r\n  if (largest !== i) {\r\n    animation.push([i, largest]);\r\n    [arr[i], arr[largest]] = [arr[largest], arr[i]];\r\n\r\n    // Recursively heapify the affected sub-tree\r\n    Heapify(arr, n, largest);\r\n  }\r\n}\r\n\r\nfunction HeapSort(arr) {\r\n  animation = [];\r\n  let n = arr.length;\r\n\r\n  // Build heap\r\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) Heapify(arr, n, i);\r\n\r\n  // One by one extract an element from heap\r\n  for (let i = n - 1; i > 0; i--) {\r\n    // Move current root to end\r\n    animation.push([i, 0]);\r\n    [arr[i], arr[0]] = [arr[0], arr[i]];\r\n\r\n    Heapify(arr, i, 0);\r\n  }\r\n  //   console.log(arr);\r\n  return animation;\r\n}\r\n\r\nexport default HeapSort;\r\n","import React, { Component } from \"react\";\nimport Bars from \"./components/Bars\";\nimport \"./App.css\";\nimport BubbleSort from \"./Sorting-algorithms/BubbleSort\";\nimport InsertionSort from \"./Sorting-algorithms/InsertionSort\";\nimport QuickSort from \"./Sorting-algorithms/QuickSort\";\nimport MergeSort from \"./Sorting-algorithms/MergeSort\";\nimport HeapSort from \"./Sorting-algorithms/HeapSort\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      arr: [],\n      noofbars: 85,\n      speed: 85,\n    };\n  }\n\n  // Generating random number\n  genreateRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  // Generating random array\n  getrandomArray() {\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n    for (let i = 0; i < bararr.length; i++)\n      bararr[i].style.backgroundColor = \"cyan\";\n\n    const myarr = [];\n    for (let i = 0; i < this.state.noofbars; i++)\n      myarr.push(this.genreateRandomNumber(10, 400));\n    this.setState({ arr: myarr });\n  }\n\n  toggleSliderBars() {\n    let elm = document.getElementById(\"slider-bar\");\n    this.setState({ noofbars: parseInt(elm.value) });\n    this.getrandomArray();\n  }\n\n  // When the page renders first time\n  componentDidMount() {\n    this.getrandomArray();\n  }\n\n  // Checking if the initial array is sorted or not\n  checkSorted(arr, sortedarr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] !== sortedarr[i]) return false;\n    }\n    return true;\n  }\n\n  // Animating the algorithms\n  animateSort(animation) {\n    let arr = this.state.arr;\n    let sortedarr = this.state.arr.slice(); //getting new copy of the arr\n    sortedarr.sort((a, b) => {\n      return a - b;\n    });\n\n    // console.log(animation);\n    // console.log(arr);\n    if (this.checkSorted(arr, sortedarr)) return;\n\n    // Disabling the sidebar and buttons\n    let elm = document.getElementsByClassName(\"btn\");\n    for (let i = 0; i < elm.length; i++) {\n      elm[i].disabled = true;\n    }\n    elm = document.getElementById(\"slider-bar\");\n    elm.disabled = true;\n\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n    // console.log(sortedarr);\n\n    let a, b, h1, h2;\n\n    for (let i = 0; i < animation.length; i++) {\n      a = animation[i][0];\n      b = animation[i][1];\n      // Getting there height\n      h1 = arr[a];\n      h2 = arr[b];\n      let color = \"white\";\n\n      if (h1 > h2 && a < b) color = \"#ff4365\";\n      setTimeout(() => {\n        // Getting the index to be swapped\n        let a = animation[i][0];\n        let b = animation[i][1];\n        let c = animation[i];\n        // Getting there height\n        let h1 = arr[a];\n        let h2 = arr[b];\n\n        // Set the height and color of the bars currently being compared\n        bararr[b].style.backgroundColor = color;\n        bararr[a].style.backgroundColor = color;\n        bararr[b].style.height = `${h1}px`;\n        bararr[a].style.height = `${h2}px`;\n\n        // For pivot element\n        if (c.length === 3) bararr[c[2]].style.backgroundColor = \"orange\";\n\n        // Swap the elements\n        [arr[a], arr[b]] = [arr[b], arr[a]];\n\n        // Change the color of previously selected values back\n        if (i !== 0) {\n          a = animation[i - 1][0];\n          b = animation[i - 1][1];\n          bararr[a].style.background = \"cyan\";\n          bararr[b].style.background = \"cyan\";\n        }\n\n        // If this array is sorted change their color\n        if (this.checkSorted(arr, sortedarr)) {\n          // Enabling the buttons and sidebar\n\n          let elm = document.getElementsByClassName(\"btn\");\n          for (let j = 0; j < elm.length; j++) {\n            elm[j].disabled = false;\n          }\n\n          elm = document.getElementById(\"slider-bar\");\n          elm.disabled = false;\n\n          for (let j = 0; j < arr.length; j++)\n            bararr[j].style.backgroundColor = \"white\";\n\n          setTimeout(() => {\n            for (let j = 0; j < arr.length; j++) {\n              setTimeout(() => {\n                bararr[j].style.backgroundColor = \"#53fc11\";\n              }, j * 15); // For changing the color after array is sorted\n            }\n          }, 85);\n        }\n      }, i * this.state.speed);\n    }\n  }\n\n  // Algorithms being called\n  bubbleSort() {\n    let arr = this.state.arr.slice(); //Getting a new array\n    const animation = BubbleSort(arr);\n    this.animateSort(animation);\n  }\n\n  insertionSort() {\n    let arr = this.state.arr.slice();\n    const animation = InsertionSort(arr);\n    this.animateSort(animation);\n  }\n\n  quickSort() {\n    let arr = this.state.arr.slice();\n    const animation = QuickSort(arr);\n    this.animateSort(animation);\n  }\n\n  mergeSort() {\n    let arr = this.state.arr.slice();\n    const animation = MergeSort(arr);\n    this.animateSort(animation);\n  }\n\n  heapSort() {\n    let arr = this.state.arr.slice();\n    const animation = HeapSort(arr);\n    this.animateSort(animation);\n  }\n  //All the components that are being rendered\n  render() {\n    // Setting the Bar component setting their height\n    const barsheight = this.state.arr.map((val, inx) => {\n      return <Bars height={val} key={inx} myclass=\"bars\" />;\n    });\n\n    return (\n      <div>\n        <div className=\"bars-container\">{barsheight}</div>\n        {/* Button Area */}\n        <div className=\"buttons-container\">\n          <button\n            onClick={() => {\n              this.getrandomArray();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Generate Array\n          </button>\n          <button\n            onClick={() => {\n              this.insertionSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Insertion Sort\n          </button>\n          <button\n            onClick={() => {\n              this.bubbleSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Bubble Sort\n          </button>\n          <button\n            onClick={() => {\n              this.quickSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Quick Sort\n          </button>\n          <button\n            onClick={() => {\n              this.mergeSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Merge Sort\n          </button>\n          <button\n            onClick={() => {\n              this.heapSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Heap Sort\n          </button>\n          <div className=\"slider\">\n            <input\n              type=\"range\"\n              value={String(this.state.noofbars)}\n              min=\"50\"\n              max=\"100\"\n              id=\"slider-bar\"\n              onInput={() => {\n                this.toggleSliderBars();\n              }}\n            ></input>\n          </div>\n        </div>\n\n        {/* Heading */}\n        <div>\n          <h1>|〡Sorting Visualizer〡|</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport reactDom from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nfunction Main() {\r\n  return <App />;\r\n}\r\n\r\n  reactDom.render(<Main />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}