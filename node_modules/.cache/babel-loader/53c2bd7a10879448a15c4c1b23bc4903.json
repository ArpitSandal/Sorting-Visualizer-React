{"ast":null,"code":"const animation = [];\n\nfunction merge(left, right, n, m, arr) {\n  let i = 0,\n      j = 0,\n      k = 0;\n\n  while (i < n && j < m) {\n    if (left[i] < right[j]) {\n      arr[k] = left[i];\n      animation.push([arr[k][1], left[i][1]]);\n      i++;\n      k++;\n    } else {\n      arr[k] = right[j];\n      j++;\n      k++;\n      animation.push([arr[k][1], right[k][1]]);\n    }\n  }\n\n  while (i < n) {\n    v[k] = left[i];\n    i++;\n    k++;\n  }\n}\n\nfunction Sort(arr, n) {\n  if (n < 2) return;\n  let mid = n / 2;\n  let left, right;\n\n  for (let i = 0; i < mid; i++) left.push(arr[i]);\n\n  for (let j = mid; j < n; j++) right.push(arr[j]);\n\n  Sort(left, left.length);\n  Sort(right, right.size());\n  Merge(left, right, left.length, right.length, arr);\n}\n\n_c = Sort;\n\nfunction MergeSort(arr) {\n  let myarr = [];\n\n  for (let i = 0; i < arr.size(); i++) myarr.push([arr[i], i]);\n\n  Sort(myarr, myarr.length);\n  return animation;\n}\n\n_c2 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Sort\");\n$RefreshReg$(_c2, \"MergeSort\");","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/Sorting-algorithms/MergeSort.js"],"names":["animation","merge","left","right","n","m","arr","i","j","k","push","v","Sort","mid","length","size","Merge","MergeSort","myarr"],"mappings":"AAAA,MAAMA,SAAS,GAAG,EAAlB;;AAEA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,GAAlC,EAAuC;AACrC,MAAIC,CAAC,GAAG,CAAR;AAAA,MACEC,CAAC,GAAG,CADN;AAAA,MAEEC,CAAC,GAAG,CAFN;;AAGA,SAAOF,CAAC,GAAGH,CAAJ,IAASI,CAAC,GAAGH,CAApB,EAAuB;AACrB,QAAIH,IAAI,CAACK,CAAD,CAAJ,GAAUJ,KAAK,CAACK,CAAD,CAAnB,EAAwB;AACtBF,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASP,IAAI,CAACK,CAAD,CAAb;AACAP,MAAAA,SAAS,CAACU,IAAV,CAAe,CAACJ,GAAG,CAACG,CAAD,CAAH,CAAO,CAAP,CAAD,EAAYP,IAAI,CAACK,CAAD,CAAJ,CAAQ,CAAR,CAAZ,CAAf;AACAA,MAAAA,CAAC;AACDE,MAAAA,CAAC;AACF,KALD,MAKO;AACLH,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASN,KAAK,CAACK,CAAD,CAAd;AACAA,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACDT,MAAAA,SAAS,CAACU,IAAV,CAAe,CAACJ,GAAG,CAACG,CAAD,CAAH,CAAO,CAAP,CAAD,EAAWN,KAAK,CAACM,CAAD,CAAL,CAAS,CAAT,CAAX,CAAf;AACD;AACF;;AAED,SAAMF,CAAC,GAACH,CAAR,EAAU;AACNO,IAAAA,CAAC,CAACF,CAAD,CAAD,GAAKP,IAAI,CAACK,CAAD,CAAT;AACAA,IAAAA,CAAC;AACDE,IAAAA,CAAC;AACJ;AACF;;AACD,SAASG,IAAT,CAAcN,GAAd,EAAmBF,CAAnB,EAAsB;AACpB,MAAIA,CAAC,GAAG,CAAR,EAAW;AACX,MAAIS,GAAG,GAAGT,CAAC,GAAG,CAAd;AACA,MAAIF,IAAJ,EAAUC,KAAV;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,GAApB,EAAyBN,CAAC,EAA1B,EAA8BL,IAAI,CAACQ,IAAL,CAAUJ,GAAG,CAACC,CAAD,CAAb;;AAC9B,OAAK,IAAIC,CAAC,GAAGK,GAAb,EAAkBL,CAAC,GAAGJ,CAAtB,EAAyBI,CAAC,EAA1B,EAA8BL,KAAK,CAACO,IAAN,CAAWJ,GAAG,CAACE,CAAD,CAAd;;AAC9BI,EAAAA,IAAI,CAACV,IAAD,EAAOA,IAAI,CAACY,MAAZ,CAAJ;AACAF,EAAAA,IAAI,CAACT,KAAD,EAAQA,KAAK,CAACY,IAAN,EAAR,CAAJ;AACAC,EAAAA,KAAK,CAACd,IAAD,EAAOC,KAAP,EAAcD,IAAI,CAACY,MAAnB,EAA2BX,KAAK,CAACW,MAAjC,EAAyCR,GAAzC,CAAL;AACD;;KATQM,I;;AAUT,SAASK,SAAT,CAAmBX,GAAnB,EAAwB;AACtB,MAAIY,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACS,IAAJ,EAApB,EAAgCR,CAAC,EAAjC,EAAqCW,KAAK,CAACR,IAAN,CAAW,CAACJ,GAAG,CAACC,CAAD,CAAJ,EAASA,CAAT,CAAX;;AACrCK,EAAAA,IAAI,CAACM,KAAD,EAAQA,KAAK,CAACJ,MAAd,CAAJ;AACA,SAAOd,SAAP;AACD;;MALQiB,S;AAOT,eAAeA,SAAf","sourcesContent":["const animation = [];\r\n\r\nfunction merge(left, right, n, m, arr) {\r\n  let i = 0,\r\n    j = 0,\r\n    k = 0;\r\n  while (i < n && j < m) {\r\n    if (left[i] < right[j]) {\r\n      arr[k] = left[i];\r\n      animation.push([arr[k][1], left[i][1]]);\r\n      i++;\r\n      k++;\r\n    } else {\r\n      arr[k] = right[j];\r\n      j++;\r\n      k++;\r\n      animation.push([arr[k][1],right[k][1]]);\r\n    }\r\n  }\r\n\r\n  while(i<n){\r\n      v[k]=left[i]\r\n      i++;\r\n      k++;\r\n  }\r\n}\r\nfunction Sort(arr, n) {\r\n  if (n < 2) return;\r\n  let mid = n / 2;\r\n  let left, right;\r\n  for (let i = 0; i < mid; i++) left.push(arr[i]);\r\n  for (let j = mid; j < n; j++) right.push(arr[j]);\r\n  Sort(left, left.length);\r\n  Sort(right, right.size());\r\n  Merge(left, right, left.length, right.length, arr);\r\n}\r\nfunction MergeSort(arr) {\r\n  let myarr = [];\r\n  for (let i = 0; i < arr.size(); i++) myarr.push([arr[i], i]);\r\n  Sort(myarr, myarr.length);\r\n  return animation;\r\n}\r\n\r\nexport default MergeSort;\r\n"]},"metadata":{},"sourceType":"module"}