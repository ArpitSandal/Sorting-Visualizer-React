{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\sorting-visualizer\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Bars from \"./components/Bars\";\nimport \"./App.css\";\nimport BubbleSort from \"./Sorting-algorithms/BubbleSort\";\nimport InsertionSort from \"./Sorting-algorithms/InsertionSort\";\nimport QuickSort from \"./Sorting-algorithms/QuickSort\";\nimport MergeSort from \"./Sorting-algorithms/MergeSort\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      arr: [],\n      noofbars: 85,\n      speed: 85\n    };\n  } // Generating random number\n\n\n  genreateRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  } // Generating random array\n\n\n  getrandomArray(colcheck) {\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n\n    for (let i = 0; i < bararr.length; i++) bararr[i].style.backgroundColor = \"cyan\";\n\n    let elm = document.getElementById(\"slider-bar\");\n    elm.disabled = false;\n    const myarr = [];\n\n    for (let i = 0; i < this.state.noofbars; i++) myarr.push(this.genreateRandomNumber(10, 400));\n\n    this.setState({\n      arr: myarr\n    });\n  }\n\n  toggleSliderBars() {\n    let elm = document.getElementById(\"slider-bar\");\n    this.setState({\n      noofbars: parseInt(elm.value)\n    });\n    this.getrandomArray();\n    this.render();\n  } // When the page renders first time\n\n\n  componentDidMount() {\n    this.getrandomArray(1);\n  } // Checking if the initial array is sorted or not\n\n\n  checkSorted(arr, sortedarr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] !== sortedarr[i]) return false;\n    }\n\n    return true;\n  } // Animating the algorithms\n\n\n  animateSort(animation) {\n    let arr = this.state.arr;\n    let sortedarr = this.state.arr.slice(); //getting new copy of the arr\n\n    sortedarr.sort((a, b) => {\n      return a - b;\n    }); // console.log(animation);\n    // console.log(arr);\n\n    if (this.checkSorted(arr, sortedarr)) return; // Disabling the sidebar and buttons\n\n    let elm = document.getElementsByClassName(\"btn\");\n\n    for (let i = 0; i < elm.length; i++) {\n      elm[i].disabled = true;\n    }\n\n    elm = document.getElementById(\"slider-bar\");\n    elm.disabled = true;\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n    // console.log(sortedarr);\n\n    let a, b, h1, h2;\n\n    for (let i = 0; i < animation.length; i++) {\n      a = animation[i][0];\n      b = animation[i][1]; // Getting there height\n\n      h1 = arr[a];\n      h2 = arr[b];\n      let color = \"white\";\n      if (h1 > h2 && a < b) color = \"#ff4365\";\n      setTimeout(() => {\n        // Getting the index to be swapped\n        let p = animation[i][0];\n        let q = animation[i][1];\n        let r = animation[i]; // Getting there height\n\n        let h1 = arr[p];\n        let h2 = arr[b];\n        console.log(bararr[q].style.backgroundColor, bararr[p].style.backgroundColor); // Set the height and color of the bars currently being compared\n\n        bararr[q].style.backgroundColor = color;\n        bararr[p].style.backgroundColor = color;\n        bararr[q].style.height = `${h1}px`;\n        bararr[p].style.height = `${h2}px`; // For pivot element\n\n        if (c.length === 3) bararr[c[2]].style.backgroundColor = \"orange\"; // Swap the elements\n\n        [arr[a], arr[b]] = [arr[b], arr[a]]; // Change the color of previously selected values back\n\n        if (i !== 0) {\n          a = animation[i - 1][0];\n          b = animation[i - 1][1];\n          bararr[b].style.background = \"cyan\";\n          bararr[a].style.background = \"cyan\";\n        } // If this array is sorted change their color\n\n\n        if (this.checkSorted(arr, sortedarr)) {\n          // Enabling the buttons and sidebar\n          let elm = document.getElementsByClassName(\"btn\");\n\n          for (let j = 0; j < elm.length; j++) {\n            elm[j].disabled = false;\n          }\n\n          for (let j = 0; j < arr.length; j++) bararr[j].style.backgroundColor = \"white\";\n\n          for (let j = 0; j < arr.length; j++) {\n            setTimeout(() => {\n              bararr[j].style.backgroundColor = \"#53fc11\";\n            }, j * 10); // For changing the color after array is sorted\n          }\n        }\n      }, i * this.state.speed);\n    }\n  } // Algorithms being called\n\n\n  bubbleSort() {\n    let arr = this.state.arr.slice(); //Getting a new array\n\n    const animation = BubbleSort(arr);\n    this.animateSort(animation);\n  }\n\n  insertionSort() {\n    let arr = this.state.arr.slice();\n    const animation = InsertionSort(arr);\n    this.animateSort(animation);\n  }\n\n  quickSort() {\n    let arr = this.state.arr.slice();\n    const animation = QuickSort(arr);\n    this.animateSort(animation);\n  }\n\n  mergeSort() {\n    let arr = this.state.arr.slice();\n    const animation = MergeSort(arr);\n    this.animateSort(animation);\n  } //All the components that are being rendered\n\n\n  render() {\n    // Setting the Bar component setting their height\n    const barsheight = this.state.arr.map((val, inx) => {\n      return /*#__PURE__*/_jsxDEV(Bars, {\n        height: val,\n        col: this.state.color,\n        my: \"bars\"\n      }, inx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bars-container\",\n        children: barsheight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.getrandomArray(0);\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Generate Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.insertionSort();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.bubbleSort();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.quickSort();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.mergeSort();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            value: String(this.state.noofbars),\n            min: \"50\",\n            max: \"100\",\n            id: \"slider-bar\",\n            onInput: () => {\n              this.toggleSliderBars();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"|\\u3021Sorting Visualizer\\u3021|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/App.js"],"names":["React","Component","Bars","BubbleSort","InsertionSort","QuickSort","MergeSort","App","constructor","state","arr","noofbars","speed","genreateRandomNumber","min","max","Math","floor","random","getrandomArray","colcheck","bararr","document","getElementsByClassName","i","length","style","backgroundColor","elm","getElementById","disabled","myarr","push","setState","toggleSliderBars","parseInt","value","render","componentDidMount","checkSorted","sortedarr","animateSort","animation","slice","sort","a","b","h1","h2","color","setTimeout","p","q","r","console","log","height","c","background","j","bubbleSort","insertionSort","quickSort","mergeSort","barsheight","map","val","inx","String"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Bars from \"./components/Bars\";\nimport \"./App.css\";\nimport BubbleSort from \"./Sorting-algorithms/BubbleSort\";\nimport InsertionSort from \"./Sorting-algorithms/InsertionSort\";\nimport QuickSort from \"./Sorting-algorithms/QuickSort\";\nimport MergeSort from \"./Sorting-algorithms/MergeSort\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      arr: [],\n      noofbars: 85,\n      speed: 85,\n    };\n  }\n\n  // Generating random number\n  genreateRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  // Generating random array\n  getrandomArray(colcheck) {\n      let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n      for (let i = 0; i < bararr.length; i++)\n        bararr[i].style.backgroundColor = \"cyan\";\n    let elm = document.getElementById(\"slider-bar\");\n    elm.disabled = false;\n\n    const myarr = [];\n    for (let i = 0; i < this.state.noofbars; i++)\n      myarr.push(this.genreateRandomNumber(10, 400));\n    this.setState({ arr: myarr });\n  }\n\n  toggleSliderBars() {\n    let elm = document.getElementById(\"slider-bar\");\n    this.setState({ noofbars: parseInt(elm.value) });\n    this.getrandomArray();\n    this.render();\n  }\n\n  // When the page renders first time\n  componentDidMount() {\n    this.getrandomArray(1);\n  }\n\n  // Checking if the initial array is sorted or not\n  checkSorted(arr, sortedarr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] !== sortedarr[i]) return false;\n    }\n    return true;\n  }\n\n  // Animating the algorithms\n  animateSort(animation) {\n    let arr = this.state.arr;\n    let sortedarr = this.state.arr.slice(); //getting new copy of the arr\n    sortedarr.sort((a, b) => {\n      return a - b;\n    });\n\n    // console.log(animation);\n    // console.log(arr);\n    if (this.checkSorted(arr, sortedarr)) return;\n\n    // Disabling the sidebar and buttons\n    let elm = document.getElementsByClassName(\"btn\");\n    for (let i = 0; i < elm.length; i++) {\n      elm[i].disabled = true;\n    }\n    elm = document.getElementById(\"slider-bar\");\n    elm.disabled = true;\n\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n    // console.log(sortedarr);\n\n    let a, b, h1, h2;\n\n    for (let i = 0; i < animation.length; i++) {\n      a = animation[i][0];\n      b = animation[i][1];\n      // Getting there height\n      h1 = arr[a];\n      h2 = arr[b];\n      let color = \"white\";\n\n      if (h1 > h2 && a < b) color = \"#ff4365\";\n      setTimeout(() => {\n        // Getting the index to be swapped\n        let p = animation[i][0];\n        let q = animation[i][1];\n        let r = animation[i];\n        // Getting there height\n        let h1 = arr[p];\n        let h2 = arr[b];\n        console.log( bararr[q].style.backgroundColor,bararr[p].style.backgroundColor);\n\n        // Set the height and color of the bars currently being compared\n        bararr[q].style.backgroundColor = color;\n        bararr[p].style.backgroundColor = color;\n        bararr[q].style.height = `${h1}px`;\n        bararr[p].style.height = `${h2}px`;\n\n        // For pivot element\n        if (c.length === 3)\n          bararr[c[2]].style.backgroundColor = \"orange\";\n\n        // Swap the elements\n        [arr[a], arr[b]] = [arr[b], arr[a]];\n\n        // Change the color of previously selected values back\n        if (i !== 0) {\n          a = animation[i - 1][0];\n          b = animation[i - 1][1];\n          bararr[b].style.background = \"cyan\";\n          bararr[a].style.background = \"cyan\";\n        }\n\n        // If this array is sorted change their color\n        if (this.checkSorted(arr, sortedarr)) {\n          // Enabling the buttons and sidebar\n          let elm = document.getElementsByClassName(\"btn\");\n          for (let j = 0; j < elm.length; j++) {\n            elm[j].disabled = false;\n          }\n\n          for (let j = 0; j < arr.length; j++)\n            bararr[j].style.backgroundColor = \"white\";\n          for (let j = 0; j < arr.length; j++) {\n            setTimeout(() => {\n              bararr[j].style.backgroundColor = \"#53fc11\";\n            }, j * 10); // For changing the color after array is sorted\n          }\n        }\n      }, i * this.state.speed);\n    }\n  }\n\n  // Algorithms being called\n  bubbleSort() {\n    let arr = this.state.arr.slice(); //Getting a new array\n    const animation = BubbleSort(arr);\n    this.animateSort(animation);\n  }\n\n  insertionSort() {\n    let arr = this.state.arr.slice();\n    const animation = InsertionSort(arr);\n    this.animateSort(animation);\n  }\n\n  quickSort() {\n    let arr = this.state.arr.slice();\n    const animation = QuickSort(arr);\n    this.animateSort(animation);\n  }\n\n  mergeSort() {\n    let arr = this.state.arr.slice();\n    const animation = MergeSort(arr);\n    this.animateSort(animation);\n  }\n\n  //All the components that are being rendered\n  render() {\n    // Setting the Bar component setting their height\n    const barsheight = this.state.arr.map((val, inx) => {\n      return <Bars height={val} col={this.state.color} key={inx} my=\"bars\" />;\n    });\n\n    return (\n      <div>\n        <div className=\"bars-container\">{barsheight}</div>\n        {/* Button Area */}\n        <div className=\"buttons-container\">\n          <button\n            onClick={() => {\n              this.getrandomArray(0);\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Generate Array\n          </button>\n          <button\n            onClick={() => {\n              this.insertionSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Insertion Sort\n          </button>\n          <button\n            onClick={() => {\n              this.bubbleSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Bubble Sort\n          </button>\n          <button\n            onClick={() => {\n              this.quickSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Quick Sort\n          </button>\n          <button\n            onClick={() => {\n              this.mergeSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Merge Sort\n          </button>\n          <div className=\"slider\">\n            <input\n              type=\"range\"\n              value={String(this.state.noofbars)}\n              min=\"50\"\n              max=\"100\"\n              id=\"slider-bar\"\n              onInput={() => {\n                this.toggleSliderBars();\n              }}\n            ></input>\n          </div>\n        </div>\n\n        {/* Heading */}\n        <div>\n          <h1>|〡Sorting Visualizer〡|</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}