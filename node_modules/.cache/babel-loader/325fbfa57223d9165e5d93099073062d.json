{"ast":null,"code":"const animation = [];\n\nfunction merge(left, right, n, m, arr) {\n  let i = 0,\n      j = 0,\n      k = 0;\n\n  while (i < n && j < m) {\n    if (left[i] < right[j]) arr[k] = left[i], i++, k++;else arr[k] = right[j], j++, k++;\n  }\n}\n\nfunction Sort(arr, n) {\n  if (n < 2) return;\n  let mid = n / 2;\n  let left, right;\n\n  for (let i = 0; i < mid; i++) left.push(arr[i]);\n\n  for (let j = mid; j < n; j++) right.push(arr[j]);\n\n  Sort(left, left.length);\n  Sort(right, right.size());\n  Merge(left, right, left.length, right.length, arr);\n}\n\n_c = Sort;\n\nfunction MergeSort(arr) {\n  let myarr = [];\n\n  for (let i = 0; i < arr.size(); i++) myarr.push([arr[i], i]);\n\n  Sort(myarr, myarr.length);\n  return animation;\n}\n\n_c2 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Sort\");\n$RefreshReg$(_c2, \"MergeSort\");","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/Sorting-algorithms/MergeSort.js"],"names":["animation","merge","left","right","n","m","arr","i","j","k","Sort","mid","push","length","size","Merge","MergeSort","myarr"],"mappings":"AAAA,MAAMA,SAAS,GAAC,EAAhB;;AAEA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,GAAlC,EAAsC;AAClC,MAAIC,CAAC,GAAC,CAAN;AAAA,MAAQC,CAAC,GAAC,CAAV;AAAA,MAAYC,CAAC,GAAC,CAAd;;AACA,SAAMF,CAAC,GAACH,CAAF,IAAOI,CAAC,GAACH,CAAf,EAAiB;AACb,QAAGH,IAAI,CAACK,CAAD,CAAJ,GAAQJ,KAAK,CAACK,CAAD,CAAhB,EACIF,GAAG,CAACG,CAAD,CAAH,GAAOP,IAAI,CAACK,CAAD,CAAX,EAAeA,CAAC,EAAhB,EAAmBE,CAAC,EAApB,CADJ,KAEKH,GAAG,CAACG,CAAD,CAAH,GAAON,KAAK,CAACK,CAAD,CAAZ,EAAgBA,CAAC,EAAjB,EAAoBC,CAAC,EAArB;AACR;AACJ;;AACD,SAASC,IAAT,CAAcJ,GAAd,EAAmBF,CAAnB,EAAqB;AACjB,MAAGA,CAAC,GAAC,CAAL,EACI;AACJ,MAAIO,GAAG,GAACP,CAAC,GAAC,CAAV;AACA,MAAIF,IAAJ,EAASC,KAAT;;AACA,OAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACI,GAAf,EAAoBJ,CAAC,EAArB,EACIL,IAAI,CAACU,IAAL,CAAUN,GAAG,CAACC,CAAD,CAAb;;AACJ,OAAI,IAAIC,CAAC,GAACG,GAAV,EAAeH,CAAC,GAACJ,CAAjB,EAAoBI,CAAC,EAArB,EACIL,KAAK,CAACS,IAAN,CAAWN,GAAG,CAACE,CAAD,CAAd;;AACJE,EAAAA,IAAI,CAACR,IAAD,EAAMA,IAAI,CAACW,MAAX,CAAJ;AACAH,EAAAA,IAAI,CAACP,KAAD,EAAOA,KAAK,CAACW,IAAN,EAAP,CAAJ;AACAC,EAAAA,KAAK,CAACb,IAAD,EAAMC,KAAN,EAAYD,IAAI,CAACW,MAAjB,EAAyBV,KAAK,CAACU,MAA/B,EAAuCP,GAAvC,CAAL;AACH;;KAZQI,I;;AAaT,SAASM,SAAT,CAAmBV,GAAnB,EAAuB;AACnB,MAAIW,KAAK,GAAC,EAAV;;AACA,OAAI,IAAIV,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,GAAG,CAACQ,IAAJ,EAAf,EAA2BP,CAAC,EAA5B,EACIU,KAAK,CAACL,IAAN,CAAW,CAACN,GAAG,CAACC,CAAD,CAAJ,EAAQA,CAAR,CAAX;;AACJG,EAAAA,IAAI,CAACO,KAAD,EAAOA,KAAK,CAACJ,MAAb,CAAJ;AACA,SAAOb,SAAP;AACH;;MANQgB,S;AAQT,eAAeA,SAAf","sourcesContent":["const animation=[];\r\n\r\nfunction merge(left, right, n, m, arr){\r\n    let i=0,j=0,k=0;\r\n    while(i<n && j<m){\r\n        if(left[i]<right[j])\r\n            arr[k]=left[i],i++,k++;\r\n        else arr[k]=right[j],j++,k++;\r\n    }\r\n}\r\nfunction Sort(arr, n){\r\n    if(n<2)\r\n        return;\r\n    let mid=n/2;\r\n    let left,right;\r\n    for(let i=0; i<mid; i++)\r\n        left.push(arr[i]);\r\n    for(let j=mid; j<n; j++)\r\n        right.push(arr[j]);\r\n    Sort(left,left.length);\r\n    Sort(right,right.size());\r\n    Merge(left,right,left.length, right.length, arr);\r\n}\r\nfunction MergeSort(arr){\r\n    let myarr=[];\r\n    for(let i=0; i<arr.size(); i++)\r\n        myarr.push([arr[i],i]);\r\n    Sort(myarr,myarr.length)\r\n    return animation;\r\n}\r\n\r\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}