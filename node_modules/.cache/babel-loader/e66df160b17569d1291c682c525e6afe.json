{"ast":null,"code":"const animation = [];\n\nfunction Merge(left, right, n, m, arr) {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < n && j < m) {\n    if (left[i] < right[j]) {\n      //   animation.push([arr[k][1], left[i][1]]);\n      arr[k] = left[i];\n      i++;\n      k++;\n    } else {\n      //   animation.push([arr[k][1], right[j][1]]);\n      arr[k] = right[j];\n      j++;\n      k++;\n    }\n  }\n\n  while (i < n) {\n    // animation.push([arr[k][1], left[i][1]]);\n    arr[k] = left[i];\n    i++;\n    k++;\n  }\n\n  while (j < m) {\n    // animation.push([arr[k][1], right[j][1]]);\n    arr[k] = right[j];\n    j++;\n    k++;\n  }\n}\n\n_c = Merge;\n\nfunction Sort(arr, n) {\n  let curr_size = 0;\n  let left_start = 0;\n\n  for (curr_size = 1; curr_size <= n - 1; curr_size = 2 * curr_size) {\n    // Pick starting point of different subarrays of current size\n    for (left_start = 0; left_start < n - 1; left_start += 2 * curr_size) {\n      // Find ending point of left subarray. mid+1 is starting\n      // point of right\n      let mid = min(left_start + curr_size - 1, n - 1);\n      let right_end = min(left_start + 2 * curr_size - 1, n - 1); // Merge Subarrays arr[left_start...mid] & arr[mid+1...right_end]\n\n      merge(arr, left_start, mid, right_end);\n    }\n  }\n}\n\n_c2 = Sort;\n\nfunction MergeSort(arr) {\n  let myarr = []; //   for (let i = 0; i < arr.length; i++) myarr.push([arr[i], i]);\n\n  Sort(arr, arr.length);\n  console.log(arr); //   return animation;\n}\n\n_c3 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Merge\");\n$RefreshReg$(_c2, \"Sort\");\n$RefreshReg$(_c3, \"MergeSort\");","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/Sorting-algorithms/MergeSort.js"],"names":["animation","Merge","left","right","n","m","arr","i","j","k","Sort","curr_size","left_start","mid","min","right_end","merge","MergeSort","myarr","length","console","log"],"mappings":"AAAA,MAAMA,SAAS,GAAG,EAAlB;;AAEA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,GAAlC,EAAuC;AACrC,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAC,CAAN;AACA,MAAIC,CAAC,GAAC,CAAN;;AACA,SAAOF,CAAC,GAAGH,CAAJ,IAASI,CAAC,GAAGH,CAApB,EAAuB;AACrB,QAAIH,IAAI,CAACK,CAAD,CAAJ,GAAUJ,KAAK,CAACK,CAAD,CAAnB,EAAwB;AACxB;AACEF,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASP,IAAI,CAACK,CAAD,CAAb;AACAA,MAAAA,CAAC;AACDE,MAAAA,CAAC;AACF,KALD,MAKO;AACP;AACEH,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASN,KAAK,CAACK,CAAD,CAAd;AACAA,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACF;AACF;;AAED,SAAOF,CAAC,GAAGH,CAAX,EAAc;AACZ;AACAE,IAAAA,GAAG,CAACG,CAAD,CAAH,GAASP,IAAI,CAACK,CAAD,CAAb;AACAA,IAAAA,CAAC;AACDE,IAAAA,CAAC;AACF;;AACD,SAAOD,CAAC,GAAGH,CAAX,EAAc;AACZ;AACAC,IAAAA,GAAG,CAACG,CAAD,CAAH,GAASN,KAAK,CAACK,CAAD,CAAd;AACAA,IAAAA,CAAC;AACDC,IAAAA,CAAC;AACF;AACF;;KA9BQR,K;;AA+BT,SAASS,IAAT,CAAcJ,GAAd,EAAmBF,CAAnB,EAAsB;AAClB,MAAIO,SAAS,GAAC,CAAd;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,OAAKD,SAAS,GAAC,CAAf,EAAkBA,SAAS,IAAEP,CAAC,GAAC,CAA/B,EAAkCO,SAAS,GAAG,IAAEA,SAAhD,EACA;AACI;AACA,SAAKC,UAAU,GAAC,CAAhB,EAAmBA,UAAU,GAACR,CAAC,GAAC,CAAhC,EAAmCQ,UAAU,IAAI,IAAED,SAAnD,EACA;AACI;AACA;AACA,UAAIE,GAAG,GAAGC,GAAG,CAACF,UAAU,GAAGD,SAAb,GAAyB,CAA1B,EAA6BP,CAAC,GAAC,CAA/B,CAAb;AAEA,UAAIW,SAAS,GAAGD,GAAG,CAACF,UAAU,GAAG,IAAED,SAAf,GAA2B,CAA5B,EAA+BP,CAAC,GAAC,CAAjC,CAAnB,CALJ,CAOI;;AACAY,MAAAA,KAAK,CAACV,GAAD,EAAMM,UAAN,EAAkBC,GAAlB,EAAuBE,SAAvB,CAAL;AACH;AACJ;AACJ;;MAlBQL,I;;AAmBT,SAASO,SAAT,CAAmBX,GAAnB,EAAwB;AACtB,MAAIY,KAAK,GAAG,EAAZ,CADsB,CAExB;;AACER,EAAAA,IAAI,CAACJ,GAAD,EAAMA,GAAG,CAACa,MAAV,CAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,GAAZ,EAJsB,CAKxB;AACC;;MANQW,S;AAQT,eAAeA,SAAf","sourcesContent":["const animation = [];\r\n\r\nfunction Merge(left, right, n, m, arr) {\r\n  let i = 0;\r\n  let j=0;\r\n  let k=0;\r\n  while (i < n && j < m) {\r\n    if (left[i] < right[j]) {\r\n    //   animation.push([arr[k][1], left[i][1]]);\r\n      arr[k] = left[i];\r\n      i++;\r\n      k++;\r\n    } else {\r\n    //   animation.push([arr[k][1], right[j][1]]);\r\n      arr[k] = right[j];\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n\r\n  while (i < n) {\r\n    // animation.push([arr[k][1], left[i][1]]);\r\n    arr[k] = left[i];\r\n    i++;\r\n    k++;\r\n  }\r\n  while (j < m) {\r\n    // animation.push([arr[k][1], right[j][1]]);\r\n    arr[k] = right[j];\r\n    j++;\r\n    k++;\r\n  }\r\n}\r\nfunction Sort(arr, n) {\r\n    let curr_size=0;\r\n    let left_start = 0;\r\n    for (curr_size=1; curr_size<=n-1; curr_size = 2*curr_size)\r\n    {\r\n        // Pick starting point of different subarrays of current size\r\n        for (left_start=0; left_start<n-1; left_start += 2*curr_size)\r\n        {\r\n            // Find ending point of left subarray. mid+1 is starting\r\n            // point of right\r\n            let mid = min(left_start + curr_size - 1, n-1);\r\n  \r\n            let right_end = min(left_start + 2*curr_size - 1, n-1);\r\n  \r\n            // Merge Subarrays arr[left_start...mid] & arr[mid+1...right_end]\r\n            merge(arr, left_start, mid, right_end);\r\n        }\r\n    }\r\n}\r\nfunction MergeSort(arr) {\r\n  let myarr = [];\r\n//   for (let i = 0; i < arr.length; i++) myarr.push([arr[i], i]);\r\n  Sort(arr, arr.length);\r\n  console.log(arr);\r\n//   return animation;\r\n}\r\n\r\nexport default MergeSort;\r\n"]},"metadata":{},"sourceType":"module"}