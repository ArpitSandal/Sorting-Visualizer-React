{"ast":null,"code":"const animation = [];\n\nfunction Sort(arr, n) {\n  if (n < 2) return;\n  let mid = n / 2;\n  let left, right;\n\n  for (let i = 0; i < mid; i++) left.push(arr[i]);\n\n  for (let j = mid; j < n; j++) right.push(arr[j]);\n\n  Sort(left, left.length);\n  Sort(right, right.size());\n  Merge(left, right, left.length, right.length, arr);\n}\n\n_c = Sort;\n\nfunction MergeSort(arr) {\n  let myarr = [];\n\n  for (let i = 0; i < arr.size(); i++) myarr.push([arr[i], i]);\n\n  Sort(myarr, myarr.length);\n  return animation;\n}\n\n_c2 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Sort\");\n$RefreshReg$(_c2, \"MergeSort\");","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/Sorting-algorithms/MergeSort.js"],"names":["animation","Sort","arr","n","mid","left","right","i","push","j","length","size","Merge","MergeSort","myarr"],"mappings":"AAAA,MAAMA,SAAS,GAAC,EAAhB;;AAEA,SAASC,IAAT,CAAcC,GAAd,EAAmBC,CAAnB,EAAqB;AACjB,MAAGA,CAAC,GAAC,CAAL,EACI;AACJ,MAAIC,GAAG,GAACD,CAAC,GAAC,CAAV;AACA,MAAIE,IAAJ,EAASC,KAAT;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,GAAf,EAAoBG,CAAC,EAArB,EACIF,IAAI,CAACG,IAAL,CAAUN,GAAG,CAACK,CAAD,CAAb;;AACJ,OAAI,IAAIE,CAAC,GAACL,GAAV,EAAeK,CAAC,GAACN,CAAjB,EAAoBM,CAAC,EAArB,EACIH,KAAK,CAACE,IAAN,CAAWN,GAAG,CAACO,CAAD,CAAd;;AACJR,EAAAA,IAAI,CAACI,IAAD,EAAMA,IAAI,CAACK,MAAX,CAAJ;AACAT,EAAAA,IAAI,CAACK,KAAD,EAAOA,KAAK,CAACK,IAAN,EAAP,CAAJ;AACAC,EAAAA,KAAK,CAACP,IAAD,EAAMC,KAAN,EAAYD,IAAI,CAACK,MAAjB,EAAyBJ,KAAK,CAACI,MAA/B,EAAuCR,GAAvC,CAAL;AACH;;KAZQD,I;;AAaT,SAASY,SAAT,CAAmBX,GAAnB,EAAuB;AACnB,MAAIY,KAAK,GAAC,EAAV;;AACA,OAAI,IAAIP,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,GAAG,CAACS,IAAJ,EAAf,EAA2BJ,CAAC,EAA5B,EACIO,KAAK,CAACN,IAAN,CAAW,CAACN,GAAG,CAACK,CAAD,CAAJ,EAAQA,CAAR,CAAX;;AACJN,EAAAA,IAAI,CAACa,KAAD,EAAOA,KAAK,CAACJ,MAAb,CAAJ;AACA,SAAOV,SAAP;AACH;;MANQa,S;AAQT,eAAeA,SAAf","sourcesContent":["const animation=[];\r\n\r\nfunction Sort(arr, n){\r\n    if(n<2)\r\n        return;\r\n    let mid=n/2;\r\n    let left,right;\r\n    for(let i=0; i<mid; i++)\r\n        left.push(arr[i]);\r\n    for(let j=mid; j<n; j++)\r\n        right.push(arr[j]);\r\n    Sort(left,left.length);\r\n    Sort(right,right.size());\r\n    Merge(left,right,left.length, right.length, arr)\r\n}\r\nfunction MergeSort(arr){\r\n    let myarr=[];\r\n    for(let i=0; i<arr.size(); i++)\r\n        myarr.push([arr[i],i]);\r\n    Sort(myarr,myarr.length)\r\n    return animation;\r\n}\r\n\r\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}