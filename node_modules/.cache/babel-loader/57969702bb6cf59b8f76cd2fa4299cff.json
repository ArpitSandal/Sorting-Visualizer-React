{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\sorting-visualizer\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Bars from \"./components/Bars\";\nimport \"./App.css\";\nimport BubbleSort from \"./Sorting-algorithms/BubbleSort\";\nimport InsertionSort from \"./Sorting-algorithms/InsertionSort\";\nimport QuickSort from \"./Sorting-algorithms/QuickSort\";\nimport MergeSort from \"./Sorting-algorithms/MergeSort\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar speed = 100,\n    noofbars = 85;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      arr: []\n    };\n  } // Generating random number\n\n\n  genreateRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  } // Generating random array\n\n\n  getrandomArray() {\n    const myarr = [];\n\n    for (let i = 0; i < noofbars; i++) myarr.push(this.genreateRandomNumber(10, 400));\n\n    this.setState({\n      arr: myarr\n    });\n  } // When the page renders first time\n\n\n  componentDidMount() {\n    this.getrandomArray();\n  } // Checking if the initial array is sorted or not\n\n\n  checkSorted(arr, sortedarr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] !== sortedarr[i]) return false;\n    }\n\n    return true;\n  } // Animating the algorithms\n\n\n  animateSort(animation) {\n    let arr = this.state.arr;\n    let sortedarr = this.state.arr.slice(); //getting new copy of the arr\n\n    let elm = document.getElementsByClassName(\"btn\");\n\n    for (let i = 0; i < elm.length; i++) {\n      elm[i].disabled = true;\n    }\n\n    sortedarr.sort((a, b) => {\n      return a - b;\n    }); // console.log(sortedarr);\n\n    let a, b, h1, h2;\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n\n    for (let i = 0; i < animation.length; i++) {\n      a = animation[i][0];\n      b = animation[i][1]; // Getting there height\n\n      h1 = arr[a];\n      h2 = arr[b];\n      let color = \"white\";\n      if (h1 > h2 && a < b) color = \"#ff4365\";\n      setTimeout(() => {\n        // Getting the index to be swapped\n        let a = animation[i][0];\n        let b = animation[i][1]; // Getting there height\n\n        let h1 = arr[a];\n        let h2 = arr[b]; // Set the height and color of the bars currently being compared\n\n        bararr[b].style.backgroundColor = color;\n        bararr[a].style.backgroundColor = color;\n        bararr[b].style.height = `${h1}px`;\n        bararr[a].style.height = `${h2}px`; // For pivot element\n\n        if (animation[i].length === 3) bararr[animation[i][2]].style.backgroundColor = \"orange\"; // Swap the elements\n\n        [arr[a], arr[b]] = [arr[b], arr[a]]; // Change the color of previously selected values back\n\n        if (i !== 0) {\n          a = animation[i - 1][0];\n          b = animation[i - 1][1];\n          bararr[b].style.background = \"cyan\";\n          bararr[a].style.background = \"cyan\";\n        } // If this array is sorted change their color\n\n\n        if (this.checkSorted(arr, sortedarr)) {\n          let elm = document.getElementsByClassName(\"btn\");\n\n          for (let j = 0; j < elm.length; j++) {\n            elm[j].disabled = false;\n          }\n\n          for (let j = 0; j < arr.length; j++) bararr[j].style.backgroundColor = \"white\";\n\n          for (let j = 0; j < arr.length; j++) {\n            setTimeout(() => {\n              bararr[j].style.backgroundColor = \"#53fc11\";\n            }, j * 10); // For changing the color after array is sorted\n          }\n        }\n      }, i * speed);\n    }\n  } // Algorithms being called\n\n\n  bubbleSort() {\n    let arr = this.state.arr.slice(); //Getting a new array\n\n    const animation = BubbleSort(arr);\n    this.animateSort(animation);\n  }\n\n  insertionSort() {\n    let arr = this.state.arr.slice();\n    const animation = InsertionSort(arr);\n    this.animateSort(animation);\n  }\n\n  quickSort() {\n    let arr = this.state.arr.slice();\n    const animation = QuickSort(arr);\n    this.animateSort(animation);\n  }\n\n  mergeSort() {\n    let arr = this.state.arr.slice();\n    const animation = MergeSort(arr);\n    this.animateSort(animation);\n  } //All the components that are being rendered\n\n\n  render() {\n    // Setting the Bar component setting their height\n    const barsheight = this.state.arr.map((val, inx) => {\n      return /*#__PURE__*/_jsxDEV(Bars, {\n        height: val,\n        my: \"bars\"\n      }, inx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bars-container\",\n        children: barsheight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.getrandomArray();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Generate Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.insertionSort();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.bubbleSort();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.quickSort();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.mergeSort();\n          },\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"|\\u3021Sorting Visualizer\\u3021|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/App.js"],"names":["React","Component","Bars","BubbleSort","InsertionSort","QuickSort","MergeSort","speed","noofbars","App","constructor","state","arr","genreateRandomNumber","min","max","Math","floor","random","getrandomArray","myarr","i","push","setState","componentDidMount","checkSorted","sortedarr","length","animateSort","animation","slice","elm","document","getElementsByClassName","disabled","sort","a","b","h1","h2","bararr","color","setTimeout","style","backgroundColor","height","background","j","bubbleSort","insertionSort","quickSort","mergeSort","render","barsheight","map","val","inx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Bars from \"./components/Bars\";\nimport \"./App.css\";\nimport BubbleSort from \"./Sorting-algorithms/BubbleSort\";\nimport InsertionSort from \"./Sorting-algorithms/InsertionSort\";\nimport QuickSort from \"./Sorting-algorithms/QuickSort\";\nimport MergeSort from \"./Sorting-algorithms/MergeSort\";\n\nvar speed = 100,noofbars=85;\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      arr: [],\n    };\n  }\n\n  // Generating random number\n  genreateRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  // Generating random array\n  getrandomArray() {\n    const myarr = [];\n    for (let i = 0; i < noofbars; i++) myarr.push(this.genreateRandomNumber(10, 400));\n    this.setState({ arr: myarr });\n  }\n\n  // When the page renders first time\n  componentDidMount() {\n    this.getrandomArray();\n  }\n\n  // Checking if the initial array is sorted or not\n  checkSorted(arr, sortedarr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] !== sortedarr[i]) return false;\n    }\n    return true;\n  }\n\n  // Animating the algorithms\n  animateSort(animation) {\n    let arr = this.state.arr;\n    let sortedarr = this.state.arr.slice(); //getting new copy of the arr\n    let elm=document.getElementsByClassName(\"btn\");\n    for(let i=0; i<elm.length; i++){\n      elm[i].disabled=true;\n    }\n    sortedarr.sort((a, b) => {\n      return a - b;\n    });\n    // console.log(sortedarr);\n\n    let a, b, h1, h2;\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n\n    for (let i = 0; i < animation.length; i++) {\n      a = animation[i][0];\n      b = animation[i][1];\n      // Getting there height\n      h1 = arr[a];\n      h2 = arr[b];\n      let color = \"white\";\n\n      if (h1 > h2 && a < b) color = \"#ff4365\";\n      setTimeout(() => {\n        // Getting the index to be swapped\n        let a = animation[i][0];\n        let b = animation[i][1];\n        // Getting there height\n        let h1 = arr[a];\n        let h2 = arr[b];\n\n        // Set the height and color of the bars currently being compared\n        bararr[b].style.backgroundColor = color;\n        bararr[a].style.backgroundColor = color;\n        bararr[b].style.height = `${h1}px`;\n        bararr[a].style.height = `${h2}px`;\n\n        // For pivot element\n        if (animation[i].length === 3)\n          bararr[animation[i][2]].style.backgroundColor = \"orange\";\n\n        // Swap the elements\n        [arr[a], arr[b]] = [arr[b], arr[a]];\n\n        // Change the color of previously selected values back\n        if (i !== 0) {\n          a = animation[i - 1][0];\n          b = animation[i - 1][1];\n          bararr[b].style.background = \"cyan\";\n          bararr[a].style.background = \"cyan\";\n        }\n\n        // If this array is sorted change their color\n        if (this.checkSorted(arr, sortedarr)) {\n          let elm=document.getElementsByClassName(\"btn\");\n          for(let j=0; j<elm.length; j++){\n            elm[j].disabled=false;\n          }\n          for (let j = 0; j < arr.length; j++)\n            bararr[j].style.backgroundColor = \"white\";\n          for (let j = 0; j < arr.length; j++) {\n            setTimeout(() => {\n              bararr[j].style.backgroundColor = \"#53fc11\";\n            }, j * 10); // For changing the color after array is sorted\n          }\n        }\n      }, i *speed );\n    }\n  }\n\n  // Algorithms being called\n  bubbleSort() {\n    let arr = this.state.arr.slice(); //Getting a new array\n    const animation = BubbleSort(arr);\n    this.animateSort(animation);\n  }\n\n  insertionSort() {\n    let arr = this.state.arr.slice();\n    const animation = InsertionSort(arr);\n    this.animateSort(animation);\n  }\n\n  quickSort() {\n    let arr = this.state.arr.slice();\n    const animation = QuickSort(arr);\n    this.animateSort(animation);\n  }\n\n  mergeSort() {\n    let arr = this.state.arr.slice();\n    const animation = MergeSort(arr);\n    this.animateSort(animation);\n  }\n\n  //All the components that are being rendered\n  render() {\n    // Setting the Bar component setting their height\n    const barsheight = this.state.arr.map((val, inx) => {\n      return <Bars height={val} key={inx} my=\"bars\" />;\n    });\n\n    return (\n      <div>\n        <div className=\"bars-container\">{barsheight}</div>\n        <div className=\"buttons-container\">\n        <button\n            onClick={() => {\n              this.getrandomArray();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Generate Array\n          </button>\n          <button\n            onClick={() => {\n              this.insertionSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Insertion Sort\n          </button>\n          <button\n            onClick={() => {\n              this.bubbleSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Bubble Sort\n          </button>\n          <button\n            onClick={() => {\n              this.quickSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Quick Sort\n          </button>\n          <button\n            onClick={() => {\n              this.mergeSort();\n            }}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Merge Sort\n          </button>\n        </div>\n        <div>\n          <h1>|〡Sorting Visualizer〡|</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}