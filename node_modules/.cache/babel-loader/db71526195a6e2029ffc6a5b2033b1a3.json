{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\sorting-visualizer\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Bars from \"./components/Bars\";\nimport \"./App.css\";\nimport BubbleSort from \"./Sorting-algorithms/BubbleSort\";\nimport InsertionSort from \"./Sorting-algorithms/InsertionSort\";\nimport QuickSort from \"./Sorting-algorithms/QuickSort\";\nimport MergeSort from \"./Sorting-algorithms/MergeSort\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar speedquick = 50,\n    speedmerge = 50,\n    speedinsert = 50,\n    speedbubble = 50;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      arr: []\n    };\n  } // Generating random number\n\n\n  genreateRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  } // Generating random array\n\n\n  getrandomArray() {\n    const myarr = [];\n\n    for (let i = 0; i < 80; i++) myarr.push(this.genreateRandomNumber(10, 400));\n\n    this.setState({\n      arr: myarr\n    });\n  } // When the page renders first time\n\n\n  componentDidMount() {\n    this.getrandomArray();\n  } // Checking if the initial array is sorted or not\n\n\n  checkSorted(arr, sortedarr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] != sortedarr[i]) return false;\n    }\n\n    return true;\n  } // Animating the algorithms\n\n\n  animateSort(animation, animatespeed) {\n    let arr = this.state.arr;\n    let sortedarr = this.state.arr.slice(); //getting new copy of the arr\n\n    sortedarr.sort((a, b) => {\n      return a - b;\n    }); // console.log(sortedarr);\n\n    let a, b, h1, h2;\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n\n    for (let i = 0; i < animation.length; i++) {\n      setTimeout(() => {\n        // Getting the index to be swapped\n        a = animation[i][0];\n        b = animation[i][1]; // Getting there height\n\n        h1 = arr[a];\n        h2 = arr[b]; // Set the height and color of the bars currently being compared\n\n        bararr[b].style.height = `${h1}px`;\n        bararr[a].style.height = `${h2}px`;\n        bararr[b].style.backgroundColor = \"#f72585\";\n        bararr[a].style.background = \"#f72585\"; // For pivot element\n\n        if (animation[i].length == 3) bararr[animation[i][2]].style.backgroundColor = \"green\"; // Swap the elements\n\n        [arr[a], arr[b]] = [arr[b], arr[a]]; // Change the color of previously selected values back\n\n        if (i != 0) {\n          a = animation[i - 1][0];\n          b = animation[i - 1][1];\n          bararr[b].style.background = \"white\";\n          bararr[a].style.background = \"white\";\n        } // If this array is sorted change their color\n\n\n        if (this.checkSorted(arr, sortedarr)) {\n          for (let j = 0; j < arr.length; j++) bararr[j].style.backgroundColor = \"red\";\n\n          for (let j = 0; j < arr.length; j++) {\n            setTimeout(() => {\n              bararr[j].style.backgroundColor = \"cyan\";\n            }, j * 10); // For changing the color after array is sorted\n          }\n        }\n      }, i * animatespeed);\n    }\n  } // Algorithms being called\n\n\n  bubbleSort(animatespeed) {\n    let arr = this.state.arr.slice(); //Getting a new array\n\n    const animation = BubbleSort(arr);\n    this.animateSort(animation, animatespeed);\n  }\n\n  insertionSort(animatespeed) {\n    let arr = this.state.arr.slice();\n    const animation = InsertionSort(arr, animatespeed);\n    this.animateSort(animation, animatespeed);\n  }\n\n  quickSort(animatespeed) {\n    let arr = this.state.arr.slice();\n    const animation = QuickSort(arr);\n    this.animateSort(animation, animatespeed);\n  }\n\n  mergeSort(animatespeed) {\n    let arr = this.state.arr.slice();\n    const animation = MergeSort(arr);\n    this.animateSort(animation, animatespeed);\n  } //All the components that are being rendered\n\n\n  render() {\n    // Setting the Bar component setting their height\n    const barsheight = this.state.arr.map((val, inx) => {\n      return /*#__PURE__*/_jsxDEV(Bars, {\n        height: val,\n        class: \"bars\"\n      }, inx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bars-container\",\n        children: barsheight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.bubbleSort(speedbubble);\n        },\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.insertionSort(speedinsert);\n        },\n        children: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.quickSort(speedquick);\n        },\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.mergeSort(speedmerge);\n        },\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/App.js"],"names":["React","Component","Bars","BubbleSort","InsertionSort","QuickSort","MergeSort","speedquick","speedmerge","speedinsert","speedbubble","App","constructor","state","arr","genreateRandomNumber","min","max","Math","floor","random","getrandomArray","myarr","i","push","setState","componentDidMount","checkSorted","sortedarr","length","animateSort","animation","animatespeed","slice","sort","a","b","h1","h2","bararr","document","getElementsByClassName","setTimeout","style","height","backgroundColor","background","j","bubbleSort","insertionSort","quickSort","mergeSort","render","barsheight","map","val","inx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Bars from \"./components/Bars\";\nimport \"./App.css\";\nimport BubbleSort from \"./Sorting-algorithms/BubbleSort\";\nimport InsertionSort from \"./Sorting-algorithms/InsertionSort\";\nimport QuickSort from \"./Sorting-algorithms/QuickSort\";\nimport MergeSort from \"./Sorting-algorithms/MergeSort\";\n\nvar speedquick=50, speedmerge=50, speedinsert=50, speedbubble=50;\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      arr: [],\n    };\n  }\n\n  // Generating random number\n  genreateRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  // Generating random array\n  getrandomArray() {\n    const myarr = [];\n    for (let i = 0; i < 80; i++) myarr.push(this.genreateRandomNumber(10, 400));\n    this.setState({ arr: myarr });\n  }\n\n  // When the page renders first time\n  componentDidMount() {\n    this.getrandomArray();\n  }\n\n  // Checking if the initial array is sorted or not\n  checkSorted(arr, sortedarr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] != sortedarr[i]) return false;\n    }\n    return true;\n  }\n\n  // Animating the algorithms\n  animateSort(animation, animatespeed) {\n    let arr = this.state.arr;\n    let sortedarr = this.state.arr.slice(); //getting new copy of the arr\n\n    sortedarr.sort((a, b) => {\n      return a - b;\n    });\n    // console.log(sortedarr);\n\n    let a, b, h1, h2;\n    let bararr = document.getElementsByClassName(\"bars\"); // To change the color of the array\n\n    for (let i = 0; i < animation.length; i++) {\n      setTimeout(() => {\n        // Getting the index to be swapped\n        a = animation[i][0];\n        b = animation[i][1];\n        // Getting there height\n        h1 = arr[a];\n        h2 = arr[b];\n\n        // Set the height and color of the bars currently being compared\n        bararr[b].style.height = `${h1}px`;\n        bararr[a].style.height = `${h2}px`;\n        bararr[b].style.backgroundColor = \"#f72585\";\n        bararr[a].style.background = \"#f72585\";\n\n        // For pivot element\n        if (animation[i].length == 3)\n          bararr[animation[i][2]].style.backgroundColor = \"green\";\n\n        // Swap the elements\n        [arr[a], arr[b]] = [arr[b], arr[a]];\n\n        // Change the color of previously selected values back\n        if (i != 0) {\n          a = animation[i - 1][0];\n          b = animation[i - 1][1];\n          bararr[b].style.background = \"white\";\n          bararr[a].style.background = \"white\";\n        }\n\n        // If this array is sorted change their color\n        if (this.checkSorted(arr, sortedarr)) {\n          for (let j = 0; j < arr.length; j++)\n            bararr[j].style.backgroundColor = \"red\";\n\n          for (let j = 0; j < arr.length; j++) {\n            setTimeout(() => {\n              bararr[j].style.backgroundColor = \"cyan\";\n            }, j * 10); // For changing the color after array is sorted\n          }\n        }\n      }, i * animatespeed);\n    }\n  }\n\n  // Algorithms being called\n  bubbleSort(animatespeed) {\n    let arr = this.state.arr.slice(); //Getting a new array\n    const animation = BubbleSort(arr);\n    this.animateSort(animation, animatespeed);\n  }\n\n  insertionSort(animatespeed) {\n    let arr = this.state.arr.slice();\n    const animation = InsertionSort(arr, animatespeed);\n    this.animateSort(animation, animatespeed);\n  }\n\n  quickSort(animatespeed) {\n    let arr = this.state.arr.slice();\n    const animation = QuickSort(arr);\n    this.animateSort(animation, animatespeed);\n  }\n\n  mergeSort(animatespeed) {\n    let arr = this.state.arr.slice();\n    const animation = MergeSort(arr);\n    this.animateSort(animation, animatespeed);\n  }\n\n  //All the components that are being rendered\n  render() {\n    // Setting the Bar component setting their height\n    const barsheight = this.state.arr.map((val, inx) => {\n      return <Bars height={val} key={inx} class=\"bars\" />;\n    });\n\n    return (\n      <div>\n        <div className=\"bars-container\">{barsheight}</div>\n        <button\n          onClick={() => {\n            this.bubbleSort(speedbubble);\n          }}\n        >\n          Bubble Sort\n        </button>\n        <button\n          onClick={() => {\n            this.insertionSort(speedinsert);\n          }}\n        >\n          Insertion Sort\n        </button>\n        <button\n          onClick={() => {\n            this.quickSort(speedquick);\n          }}\n        >\n          Quick Sort\n        </button>\n        <button\n          onClick={() => {\n            this.mergeSort(speedmerge);\n          }}\n        >\n          Merge Sort\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}