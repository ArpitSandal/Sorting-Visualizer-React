{"ast":null,"code":"const animation = [];\n\nfunction Merge(left, right, n, m, arr) {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < n && j < m) {\n    if (left[i] < right[j]) {\n      //   animation.push([arr[k][1], left[i][1]]);\n      arr[k] = left[i];\n      i++;\n      k++;\n    } else {\n      //   animation.push([arr[k][1], right[j][1]]);\n      arr[k] = right[j];\n      j++;\n      k++;\n    }\n  }\n\n  while (i < n) {\n    // animation.push([arr[k][1], left[i][1]]);\n    arr[k] = left[i];\n    i++;\n    k++;\n  }\n\n  while (j < m) {\n    // animation.push([arr[k][1], right[j][1]]);\n    arr[k] = right[j];\n    j++;\n    k++;\n  }\n}\n\n_c = Merge;\n\nfunction Sort(arr, n) {\n  if (n < 2) return;\n  let mid = n / 2;\n  let left = [],\n      right = [];\n\n  for (let i = 0; i < mid; i++) left.push(arr[i]);\n\n  for (let j = mid; j < n; j++) right.push(arr[j]);\n\n  Sort(left, left.length);\n  Sort(right, right.length);\n  Merge(left, right, left.length, right.length);\n}\n\n_c2 = Sort;\n\nfunction MergeSort(arr) {\n  let myarr = []; //   for (let i = 0; i < arr.length; i++) myarr.push([arr[i], i]);\n\n  Sort(arr.slice(), arr.length);\n  console.log(arr); //   return animation;\n}\n\n_c3 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Merge\");\n$RefreshReg$(_c2, \"Sort\");\n$RefreshReg$(_c3, \"MergeSort\");","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/Sorting-algorithms/MergeSort.js"],"names":["animation","Merge","left","right","n","m","arr","i","j","k","Sort","mid","push","length","MergeSort","myarr","slice","console","log"],"mappings":"AAAA,MAAMA,SAAS,GAAG,EAAlB;;AAEA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,GAAlC,EAAuC;AACrC,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAC,CAAN;AACA,MAAIC,CAAC,GAAC,CAAN;;AACA,SAAOF,CAAC,GAAGH,CAAJ,IAASI,CAAC,GAAGH,CAApB,EAAuB;AACrB,QAAIH,IAAI,CAACK,CAAD,CAAJ,GAAUJ,KAAK,CAACK,CAAD,CAAnB,EAAwB;AACxB;AACEF,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASP,IAAI,CAACK,CAAD,CAAb;AACAA,MAAAA,CAAC;AACDE,MAAAA,CAAC;AACF,KALD,MAKO;AACP;AACEH,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASN,KAAK,CAACK,CAAD,CAAd;AACAA,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACF;AACF;;AAED,SAAOF,CAAC,GAAGH,CAAX,EAAc;AACZ;AACAE,IAAAA,GAAG,CAACG,CAAD,CAAH,GAASP,IAAI,CAACK,CAAD,CAAb;AACAA,IAAAA,CAAC;AACDE,IAAAA,CAAC;AACF;;AACD,SAAOD,CAAC,GAAGH,CAAX,EAAc;AACZ;AACAC,IAAAA,GAAG,CAACG,CAAD,CAAH,GAASN,KAAK,CAACK,CAAD,CAAd;AACAA,IAAAA,CAAC;AACDC,IAAAA,CAAC;AACF;AACF;;KA9BQR,K;;AA+BT,SAASS,IAAT,CAAcJ,GAAd,EAAmBF,CAAnB,EAAsB;AACpB,MAAIA,CAAC,GAAG,CAAR,EAAW;AACX,MAAIO,GAAG,GAAGP,CAAC,GAAG,CAAd;AACA,MAAIF,IAAI,GAAC,EAAT;AAAA,MAAaC,KAAK,GAAC,EAAnB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,GAApB,EAAyBJ,CAAC,EAA1B,EAA8BL,IAAI,CAACU,IAAL,CAAUN,GAAG,CAACC,CAAD,CAAb;;AAC9B,OAAK,IAAIC,CAAC,GAAGG,GAAb,EAAkBH,CAAC,GAAGJ,CAAtB,EAAyBI,CAAC,EAA1B,EAA8BL,KAAK,CAACS,IAAN,CAAWN,GAAG,CAACE,CAAD,CAAd;;AAC9BE,EAAAA,IAAI,CAACR,IAAD,EAAOA,IAAI,CAACW,MAAZ,CAAJ;AACAH,EAAAA,IAAI,CAACP,KAAD,EAAQA,KAAK,CAACU,MAAd,CAAJ;AACAZ,EAAAA,KAAK,CAACC,IAAD,EAAOC,KAAP,EAAcD,IAAI,CAACW,MAAnB,EAA2BV,KAAK,CAACU,MAAjC,CAAL;AACD;;MATQH,I;;AAUT,SAASI,SAAT,CAAmBR,GAAnB,EAAwB;AACtB,MAAIS,KAAK,GAAG,EAAZ,CADsB,CAExB;;AACEL,EAAAA,IAAI,CAACJ,GAAG,CAACU,KAAJ,EAAD,EAAcV,GAAG,CAACO,MAAlB,CAAJ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ,EAJsB,CAKxB;AACC;;MANQQ,S;AAQT,eAAeA,SAAf","sourcesContent":["const animation = [];\r\n\r\nfunction Merge(left, right, n, m, arr) {\r\n  let i = 0;\r\n  let j=0;\r\n  let k=0;\r\n  while (i < n && j < m) {\r\n    if (left[i] < right[j]) {\r\n    //   animation.push([arr[k][1], left[i][1]]);\r\n      arr[k] = left[i];\r\n      i++;\r\n      k++;\r\n    } else {\r\n    //   animation.push([arr[k][1], right[j][1]]);\r\n      arr[k] = right[j];\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n\r\n  while (i < n) {\r\n    // animation.push([arr[k][1], left[i][1]]);\r\n    arr[k] = left[i];\r\n    i++;\r\n    k++;\r\n  }\r\n  while (j < m) {\r\n    // animation.push([arr[k][1], right[j][1]]);\r\n    arr[k] = right[j];\r\n    j++;\r\n    k++;\r\n  }\r\n}\r\nfunction Sort(arr, n) {\r\n  if (n < 2) return;\r\n  let mid = n / 2;\r\n  let left=[], right=[];\r\n  for (let i = 0; i < mid; i++) left.push(arr[i]);\r\n  for (let j = mid; j < n; j++) right.push(arr[j]);\r\n  Sort(left, left.length);\r\n  Sort(right, right.length);\r\n  Merge(left, right, left.length, right.length);\r\n}\r\nfunction MergeSort(arr) {\r\n  let myarr = [];\r\n//   for (let i = 0; i < arr.length; i++) myarr.push([arr[i], i]);\r\n  Sort(arr.slice(), arr.length);\r\n  console.log(arr);\r\n//   return animation;\r\n}\r\n\r\nexport default MergeSort;\r\n"]},"metadata":{},"sourceType":"module"}