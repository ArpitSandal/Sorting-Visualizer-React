{"ast":null,"code":"const animation = [];\n\nfunction merge(left, right, n, m, arr) {}\n\nfunction Sort(arr, n) {\n  if (n < 2) return;\n  let mid = n / 2;\n  let left, right;\n\n  for (let i = 0; i < mid; i++) left.push(arr[i]);\n\n  for (let j = mid; j < n; j++) right.push(arr[j]);\n\n  Sort(left, left.length);\n  Sort(right, right.size());\n  Merge(left, right, left.length, right.length, arr);\n}\n\n_c = Sort;\n\nfunction MergeSort(arr) {\n  let myarr = [];\n\n  for (let i = 0; i < arr.size(); i++) myarr.push([arr[i], i]);\n\n  Sort(myarr, myarr.length);\n  return animation;\n}\n\n_c2 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Sort\");\n$RefreshReg$(_c2, \"MergeSort\");","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/Sorting-algorithms/MergeSort.js"],"names":["animation","merge","left","right","n","m","arr","Sort","mid","i","push","j","length","size","Merge","MergeSort","myarr"],"mappings":"AAAA,MAAMA,SAAS,GAAC,EAAhB;;AAEA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,GAAlC,EAAsC,CAAE;;AACxC,SAASC,IAAT,CAAcD,GAAd,EAAmBF,CAAnB,EAAqB;AACjB,MAAGA,CAAC,GAAC,CAAL,EACI;AACJ,MAAII,GAAG,GAACJ,CAAC,GAAC,CAAV;AACA,MAAIF,IAAJ,EAASC,KAAT;;AACA,OAAI,IAAIM,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,GAAf,EAAoBC,CAAC,EAArB,EACIP,IAAI,CAACQ,IAAL,CAAUJ,GAAG,CAACG,CAAD,CAAb;;AACJ,OAAI,IAAIE,CAAC,GAACH,GAAV,EAAeG,CAAC,GAACP,CAAjB,EAAoBO,CAAC,EAArB,EACIR,KAAK,CAACO,IAAN,CAAWJ,GAAG,CAACK,CAAD,CAAd;;AACJJ,EAAAA,IAAI,CAACL,IAAD,EAAMA,IAAI,CAACU,MAAX,CAAJ;AACAL,EAAAA,IAAI,CAACJ,KAAD,EAAOA,KAAK,CAACU,IAAN,EAAP,CAAJ;AACAC,EAAAA,KAAK,CAACZ,IAAD,EAAMC,KAAN,EAAYD,IAAI,CAACU,MAAjB,EAAyBT,KAAK,CAACS,MAA/B,EAAuCN,GAAvC,CAAL;AACH;;KAZQC,I;;AAaT,SAASQ,SAAT,CAAmBT,GAAnB,EAAuB;AACnB,MAAIU,KAAK,GAAC,EAAV;;AACA,OAAI,IAAIP,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,GAAG,CAACO,IAAJ,EAAf,EAA2BJ,CAAC,EAA5B,EACIO,KAAK,CAACN,IAAN,CAAW,CAACJ,GAAG,CAACG,CAAD,CAAJ,EAAQA,CAAR,CAAX;;AACJF,EAAAA,IAAI,CAACS,KAAD,EAAOA,KAAK,CAACJ,MAAb,CAAJ;AACA,SAAOZ,SAAP;AACH;;MANQe,S;AAQT,eAAeA,SAAf","sourcesContent":["const animation=[];\r\n\r\nfunction merge(left, right, n, m, arr){}\r\nfunction Sort(arr, n){\r\n    if(n<2)\r\n        return;\r\n    let mid=n/2;\r\n    let left,right;\r\n    for(let i=0; i<mid; i++)\r\n        left.push(arr[i]);\r\n    for(let j=mid; j<n; j++)\r\n        right.push(arr[j]);\r\n    Sort(left,left.length);\r\n    Sort(right,right.size());\r\n    Merge(left,right,left.length, right.length, arr);\r\n}\r\nfunction MergeSort(arr){\r\n    let myarr=[];\r\n    for(let i=0; i<arr.size(); i++)\r\n        myarr.push([arr[i],i]);\r\n    Sort(myarr,myarr.length)\r\n    return animation;\r\n}\r\n\r\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}