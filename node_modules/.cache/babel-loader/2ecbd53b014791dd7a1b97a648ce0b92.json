{"ast":null,"code":"const animation = [];\n\nfunction Merge(arr, l, m, r) {\n  let i = 0;\n  let j = 0;\n  let k = l;\n  let n1 = m - l + 1;\n  let n2 = r - m;\n  let left = [],\n      right = [];\n\n  for (let it = 0; it < m - l + 1; it++) left.push(arr[l + i]);\n\n  for (let it = 0; it < r - m; it++) right.push(arr[m + 1 + it]);\n\n  while (i < n1 && j < n2) {\n    if (left[i] < right[j]) {\n      //   animation.push([arr[k][1], left[i][1]]);\n      arr[k] = left[i];\n      i++;\n      k++;\n    } else {\n      //   animation.push([arr[k][1], right[j][1]]);\n      arr[k] = right[j];\n      j++;\n      k++;\n    }\n  }\n\n  while (i < n1) {\n    // animation.push([arr[k][1], left[i][1]]);\n    arr[k] = left[i];\n    i++;\n    k++;\n  }\n\n  while (j < n2) {\n    // animation.push([arr[k][1], right[j][1]]);\n    arr[k] = right[j];\n    j++;\n    k++;\n  }\n}\n\n_c = Merge;\n\nfunction Sort(arr, n) {\n  let curr_size = 0;\n  let left_start = 0;\n\n  for (curr_size = 1; curr_size <= n - 1; curr_size = 2 * curr_size) {\n    // Pick starting point of different subarrays of current size\n    for (left_start = 0; left_start < n - 1; left_start += 2 * curr_size) {\n      // Find ending point of left subarray. mid+1 is starting\n      // point of right\n      let mid = Math.min(left_start + curr_size - 1, n - 1);\n      let right_end = min(left_start + 2 * curr_size - 1, n - 1); // Merge Subarrays arr[left_start...mid] & arr[mid+1...right_end]\n\n      merge(arr, left_start, mid, right_end);\n    }\n  }\n}\n\n_c2 = Sort;\n\nfunction MergeSort(arr) {\n  let myarr = []; //   for (let i = 0; i < arr.length; i++) myarr.push([arr[i], i]);\n\n  Sort(arr, arr.length);\n  console.log(arr); //   return animation;\n}\n\n_c3 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Merge\");\n$RefreshReg$(_c2, \"Sort\");\n$RefreshReg$(_c3, \"MergeSort\");","map":{"version":3,"sources":["D:/projects/sorting-visualizer/src/Sorting-algorithms/MergeSort.js"],"names":["animation","Merge","arr","l","m","r","i","j","k","n1","n2","left","right","it","push","Sort","n","curr_size","left_start","mid","Math","min","right_end","merge","MergeSort","myarr","length","console","log"],"mappings":"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","sourcesContent":["const animation = [];\r\n\r\nfunction Merge(arr, l, m, r) {\r\n  let i = 0;\r\n  let j = 0;\r\n  let k = l;\r\n  let n1=m-l+1;\r\n  let n2=r-m;\r\n  let left=[],right=[];\r\n  for (let it = 0; it < m - l + 1; it++) left.push(arr[l + i]);\r\n  for (let it = 0; it < r - m; it++) right.push(arr[m + 1 + it]);\r\n\r\n  while (i < n1 && j < n2) {\r\n    if (left[i] < right[j]) {\r\n      //   animation.push([arr[k][1], left[i][1]]);\r\n      arr[k] = left[i];\r\n      i++;\r\n      k++;\r\n    } else {\r\n      //   animation.push([arr[k][1], right[j][1]]);\r\n      arr[k] = right[j];\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n\r\n  while (i < n1) {\r\n    // animation.push([arr[k][1], left[i][1]]);\r\n    arr[k] = left[i];\r\n    i++;\r\n    k++;\r\n  }\r\n  while (j < n2) {\r\n    // animation.push([arr[k][1], right[j][1]]);\r\n    arr[k] = right[j];\r\n    j++;\r\n    k++;\r\n  }\r\n}\r\nfunction Sort(arr, n) {\r\n  let curr_size = 0;\r\n  let left_start = 0;\r\n  for (curr_size = 1; curr_size <= n - 1; curr_size = 2 * curr_size) {\r\n    // Pick starting point of different subarrays of current size\r\n    for (left_start = 0; left_start < n - 1; left_start += 2 * curr_size) {\r\n      // Find ending point of left subarray. mid+1 is starting\r\n      // point of right\r\n      let mid = Math.min(left_start + curr_size - 1, n - 1);\r\n\r\n      let right_end = min(left_start + 2 * curr_size - 1, n - 1);\r\n\r\n      // Merge Subarrays arr[left_start...mid] & arr[mid+1...right_end]\r\n      merge(arr, left_start, mid, right_end);\r\n    }\r\n  }\r\n}\r\nfunction MergeSort(arr) {\r\n  let myarr = [];\r\n  //   for (let i = 0; i < arr.length; i++) myarr.push([arr[i], i]);\r\n  Sort(arr, arr.length);\r\n  console.log(arr);\r\n  //   return animation;\r\n}\r\n\r\nexport default MergeSort;\r\n"]},"metadata":{},"sourceType":"module"}